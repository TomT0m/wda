#!/usr/bin/python
#coding: utf-8


import sys
import Queue


import gzip
import re
import subprocess
import threading


### Wikidata OWL/RDF Turtle dump
### Filter settings (3e3624405bedbff4)
### - Languages: *
### - Sites: *
### - Property types: *
### - Statements: True
### - References: True
### Generated on 2013-11-06 01:35:56.929202


HEADINGS = """@prefix w: <http://www.wikidata.org/entity/> .
@prefix wo: <http://www.wikidata.org/ontology#> .
@prefix r: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix o: <http://www.w3.org/2002/07/owl#> .
@prefix x: <http://www.w3.org/2001/XMLSchema#> .
@prefix so: <http://schema.org/> .
@prefix sk: <http://www.w3.org/2004/02/skos/core#> .
@prefix pv: <http://www.w3.org/ns/prov#> .

wo:propertyType a       o:ObjectProperty .
wo:globe        a       o:ObjectProperty .
wo:latitude     a       o:DatatypeProperty .
wo:longitude    a       o:DatatypeProperty .
wo:altitude     a       o:DatatypeProperty .
wo:gcPrecision  a       o:DatatypeProperty .
wo:time a       o:DatatypeProperty .
wo:timePrecision        a       o:DatatypeProperty .
wo:preferredCalendar    a       o:ObjectProperty .
pv:wasDerivedFrom       a       o:ObjectProperty .
so:about        a       o:ObjectProperty .
so:inLanguage   a       o:DatatypeProperty .
"""


def open_tmpfile(filename, headings):
    tmpfile = open(filename, "w")
    tmpfile.write(headings)

    return tmpfile 

def foursimport(database, filename):
    return subprocess.call(["4s-import", "-M", "wikidata_ontology.owl", "-v", "-a", database, filename])

class importThread(threading.Thread):

    def __init__(self, queue, num, database):
        threading.Thread.__init__(self)
        self.queue = queue
        self.num = num
        self.numimports = 0
        self.database = database

    def run(self):

        print("Starting import thread ... {}".format(self.num))
        while True:
            filename = self.queue.get()
            self.numimports = self.numimports + 1
            
            print("Thread {} : new file (import {} - file {})"
                  .format(self.num, self.numimports, filename))
            
            foursimport(self.database, filename)
            self.queue.task_done()
            
            print("Thread {} : (import {}): done".format(self.num, self.numimports))

def pickfile_genrator(filelist):
    while True:
        for file in filelist:
            yield file

def get_tmpfilename(base, ext, num):
    return "{}-{}.{}".format(base, num, ext) 

import argparse


def arguments():
    parser = argparse.ArgumentParser(description='Download Wikidata dump files and write data in another format.')
    
    parser.add_argument("--nlines", dest="nlines", type=int, default = 50000000 )
    parser.add_argument("database", metavar="CLUSTERKB", type=unicode, nargs = 1)
    parser.add_argument("inputfile", metavar="INPUTFILE", type=unicode, nargs = 1)
    
    #database = sys.argv[1]
    #file = sys.argv[2]
    
    return parser

def main():
   
    parser = arguments()
    args = parser.parse_args()
    print(args)
    
    headings = HEADINGS

    mnlines = args.nlines
    database = args.database[0]
    file = args.inputfile[0]
   
    print(u"{} {} {}".format(mnlines, database, file))
    tmpfilebase=u"/tmp/to_import"
    ext = u".ttl"
    
    turtle_file = gzip.open(file)
    if not turtle_file:
        print("can't open input file")
        exit()

    cluster_size = 2
    if not subprocess.call(["4s-import", "-v", database, "wikidata-ontology.owl"]) == 0:
        exit()

    queue_size = cluster_size + 2
    comqueue = Queue.Queue(queue_size)

    # launching threads
    # for i in range(cluster_size):
    for i in range(1): #cluster_size):
        thr = importThread(comqueue, i, database)
        thr.start()

    tmpfiles = [ get_tmpfilename(tmpfilebase, ext, i) for i in range(queue_size)]
    
    search_point = False
    to_write = ""

    picker = pickfile_genrator(tmpfiles)
    to_write = open_tmpfile(picker.next(), headings)
    nlines = 0 
    
    for line in turtle_file:
        nlines = ( nlines + 1 ) % mnlines
        
        to_write.write(line)
        
        if nlines == 0:
            search_point = True
            print("nlines : {}".format(nlines))

        if search_point:
            # print("<<<<{}>>>>".format(line.rstrip()))
            if line.rstrip()[-1:] == ".":
                search_point = False
                
                to_write.close()
                comqueue.put(to_write.name)
                to_write = open_tmpfile(picker.next(), headings)

    to_write.close()
    res = comqueue.put(to_write.name)
    
    comqueue.join()
    
    print("Wouhouuu {}".format(res))




if __name__ == "__main__":
    main()
